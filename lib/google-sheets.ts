import { GoogleSpreadsheet } from "google-spreadsheet"
import { JWT } from "google-auth-library"

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export type Question = {
  number: number
  text: string
  options: string[]
}

export type UserAnswer = {
  questionNumber: number
  selectedOption: string
}

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
export async function getAuthenticatedClient(sheetId: string) {
  try {
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\n/g, "\n"),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    })

    const doc = new GoogleSpreadsheet(sheetId, serviceAccountAuth)
    await doc.loadInfo()

    return doc
  } catch (error) {
    console.error("Error authenticating with Google Sheets:", error)
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
  }
}

// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
export async function getQuestionsFromSheet(sheetId: string): Promise<Question[]> {
  try {
    const doc = await getAuthenticatedClient(sheetId)
    const sheet = doc.sheetsByIndex[0]
    const rows = await sheet.getRows()

    const questions: Question[] = []

    for (const row of rows) {
      const rowData = row.toObject()
      const text = rowData["Question"] || ""
      const options = [
        rowData["Option A"],
        rowData["Option B"],
        rowData["Option C"],
        rowData["Option D"]
      ].filter((option) => !!option)

      if (text && options.length > 0) {
        questions.push({
          number: questions.length + 1,
          text,
          options
        })
      }
    }

    return questions.sort((a, b) => a.number - b.number)
  } catch (error) {
    console.error("Error fetching questions from Google Sheets:", error)
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Google Sheets")
  }
}

// üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
export async function saveUserAnswersToSheet(
  sheetId: string,
  userName: string,
  answers: UserAnswer[]
): Promise<void> {
  try {
    const doc = await getAuthenticatedClient(sheetId)
    const sheet = doc.sheetsByTitle["–õ–∏—Å—Ç2"] // <- —É–∫–∞–∂–∏ —Å–≤–æ–π –ª–∏—Å—Ç –∑–¥–µ—Å—å

    await sheet.loadCells()

    const headerRow = await sheet.getRows({ limit: 1 })
    const nextColumnIndex = headerRow.length > 0
      ? Object.keys(headerRow[0].toObject()).length
      : 1

    sheet.getCell(0, nextColumnIndex).value = userName

    for (const answer of answers) {
      const cell = sheet.getCell(answer.questionNumber, nextColumnIndex)
      cell.value = answer.selectedOption
    }

    await sheet.saveUpdatedCells()
  } catch (error) {
    console.error("Error saving answers to Google Sheets:", error)
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ Google Sheets")
  }
}